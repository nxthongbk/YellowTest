/**
 * @Description Check SIM state
 *
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t CheckSimState
(
);

/**
 * @Description Check signal strength quality
 * @parameter [OUT] qual (signal strength quality)
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t MeasureSignalStrength
(
    uint32 qual OUT
);


/**
 * @Description Test SD Card
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/


FUNCTION le_result_t AcceGyroRead
(
    uint8 reg IN,
    uint8 data OUT
);

/**
 * @Description Check id BatteryVoltage
 * @parameter [OUT] data
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t BatteryVoltage
(
    int32 value OUT
);

/**
 * @Description Read ADC via I2C IoT Card
 * @parameter [OUT] data
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t IoTCardReadADCs
(
    int32 adc1 OUT,
    int32 adc2 OUT,
    int32 adc3 OUT,
    int32 adc4 OUT
);

/**
 * @Description Check id ADC3
 * @parameter [OUT] data
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t Adc3Read
(
    int32 value OUT
);

/**
 * @Description Check id IoTCardReset
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t IoTCardReset
(
);

/**
 * @Description Check id yellow_test_UARTLoopBack
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

FUNCTION le_result_t UARTLoopBack
(
);

/**
 * @Description Test Read/Write EEPROM SPI
 * @return
 *  return LE_OK if success, otherwise LE_FAULT  
**/

//FUNCTION le_result_t SPIEeprom
//(
//);

